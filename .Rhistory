install.packages(c("shiny", "tseries"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("shiny", "tseries"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("tseries")
Y
install.packages("tseries")
install.packages("tseries")
install.packages(c("StanHeaders", "prophet", "rstan"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("tseries", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
plot.ts(x,y)
x
plot.ts(x,y)
df <- data.frame(x,y)
m <- prophet(df)
df
class(s)
class(x)
ds <- x
df <- data.frame(ds,y)
prophet(df)
df
library(prophet)
library("prophet")
df <- data.frame(ds,y)
m <- prophet(df)
future <- make_future_dataframe(m, periods = 365)
head(future)
forecast <- predict(m, future)
plot(m, forecast)
install.packages(c("MASS", "boot", "memoise", "rpart"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("tseries", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("foreign", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("shiny")
install.packages("shiny", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("Matrix", "curl", "htmltools"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("RMySQL", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("DBI")
install.packages("DBI")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:RMySQL", unload=TRUE)
install.packages("Matrix", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:DBI", unload=TRUE)
library("DBI", lib.loc="~/Library/R/3.3/library")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-myspl.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;")
class(ucscDb)
class(result)
dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables z- dbListTables(hg19)
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
class(hg19)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
warning()
class(affyData)
affyData <- dbReadTable(hg19,"affyU133Plus2")
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
affyData <- dbReadTable(hg19,"affyU133Plus2")
warnings()
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
quantile(affyMis$misMatches)
dbDisconnect(hg19)
affyMisSmall <- fetch(query,n=10); dbClearResult(query)
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
affyMisSmall <- fetch(query,n=10); dbClearResult(query)
affyMisSmall <- fetch(query,n=10)
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMisSmall <- fetch(query,n=10)
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/bioCLite.R")
source("http://bioconductor.org/bioCLite.R")
source("http://bioconductor.org/biocLite.R")
version
biocLite("rhdf5")
library(rhdf5)
created <- h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5,"foo/A"")
h5write(A, "example.h5,"foo/A)
h5write(A, example.h5","foo/A")
h5write(A, "example.h5","foo/A")
b = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
attr(b,"scale") <- "liter"
b
h5write(b,"example.h5","foo/foobaa/b")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,legnth.out=5))
df = data.frame(1L:5L,seq(0,1,length.out=5))
df
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors = FALSE)
df
h5write(dr,"example.h5","df")
h5write(df,"example.h5","df")
h5ls("example.h5")
readA  = h5read("example.h5","foo/A")
readA
h5read("example.h5","foo/A", index=list(1:3,2))
version
version
install.packages(c("Matrix", "foreign"))
install.packages("DT")
install.packages("swirl")
install.packages("XML")
install.packages("shiny")
install.packages("shiny")
library("shiny")
library("DT", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("readxl")
install.packages("tidyr")
install.packages("shinydashboard")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
detach("package:ggplot2", unload=TRUE)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
swirl()
install_from_swirl("Getting and Cleaning Data")
install.packages("readr")
install.packages("RMySQL")
install.packages("prophet")
install.packages("dplyr")
install.packages("dplyr")
install.packages("tseries")
install.packages("data.table")
install.packages("httr")
source("http://bioconductor.org/BiocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("markdown")
resetClass()
install.packages("RcppEigen")
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages("installr")
RNGkind()
O <- sample.int(1:10)
O <- sample.int(1:5)
=
O
O <- sample.int(1:5,5)
O <- sample.int(1:5,3)
O <- sample.int(1:5,5,replace = TRUE)
O
O <- sample.int(1:5,size=5,replace = TRUE)
O
O <- sample.int(2:7,size=5,replace = TRUE)
O <- sample.int(2:7,size=5,replace = TRUE)
O <- sample.int(2:7,size=5,replace = TRUE)
sample.int(2:7,size=5,replace = TRUE)
sample.int(2:7,size=5,replace = TRUE)
sample.int(2:7,size=5,replace = TRUE)
sample.int(2:7,size=5,replace = TRUE)
sample.int(7,size=5,replace = TRUE)
O <- sample.int(7,size=5,replace = TRUE)
A <- sample.int(8,size=5,replace = TRUE)
B <- sample.int(3,size=5,replace = TRUE)
C <- sample.int(10,size = 5,replace = TRUE)
C <- sample.int(2,size = 5,replace = TRUE)
C <- sample.int(10,size = 5,replace = TRUE)
D <- sample.int(2,size = 5,replace = TRUE)
dt <- data.frame(O,A,B,C,D)
dt
dt <- data.frame(O,A,B,C,D,row.names = c('O','A','B','C','D'))
dt
dt$O
dt$O$O
dt$O[=]
dt$O[1]
dt$O[1] <- 0
dt
dt['A','A']
dt['A','A'] <- 0
dt['B','B'] <- 0
dt['C','C'] <- 0
dt['D','D'] <- 0
dt
names(dt)
names(dt)[1]
dt$names(dt)[1]
dt[names(dt)[1]]
class(names(dt))
class(names(dt)[1])
min
min(dt[names(dt)[1]])
dt[names(dt)[1]][Position(0)]
dt[names(dt)[1]][Position(names(dt),"0")]
dt[names(dt)[1]][Position(names(dt),"O")]
dt[names(dt)[1]][Position(names(dt),'O')]
dt[names(dt)[1]][Position(names(dt),"0")]
dt[names(dt)[1]][Position("O",names(dt))]
Position("O",names(dt)
)
which(names(dt)=="O")
which(names(dt)=="D")
which(names(dt)=="C")
dt[c(-"O")]
dt[c(-which(names(dt)=="O"))]
dt["O"]
dt["O"][c(-which(names(dt)=="O")]
dt["O"][c(-which(names(dt)=="O")]
dt["O"]
d <- dt["O"]
d
d[-which(names(dt)=="O")]
d[,-which(names(dt)=="O")]
d[-1]
d[1,1]
d[1,]
d[,1]
d[,1][-1]
dt["O"][-1]
dt["O"][,1]
dt["O"][,1][-1]
temp <- dt["O"][,1][-1]
min(temp)
nearest <- min(temp)
pos <- which(temp == nearest)
pos
pos <- which(dt["O"] == nearest)
pos
pos <- c(2,5)
sample(pos,1)
sample(pos,1)
sample(pos,1)
sample(pos,1)
sample(pos,1)
pos <- 2
dt["O"]
row.names(pos)
row.names(dt)
row.names(dt)[pos]
seq <- "O"
append("A")
append("A",seq)
seq
append(seq,"A")
seq
visited <- seq[seq[which(seq!="O")]]
visited
seq != "O"
seq == "O"
seq
seq <- append(seq,"A")
seq == "O"
seq != "O"
visited <- seq[seq != "O"]
visited
names(dt)
names(dt) != seq
index <- names(dt) != seq
dt["A"][index]
index
dt["A"]
dt["A"][,index]
dt["A"][index,]
index <- names(dt) != seq
row_temp <- DT[current][index,]
row_temp <- dt[current][index,]
row_temp <- dt["A"][index,]
row_temp
nearest <- min(row_temp)
dt
nearest
pos <- which(row_temp == nearest)
pos
row_temp
index <- names(dt) != seq
row_temp <- DT[current]
temp <- row_temp[index,]
row_temp <- dt[current]
temp <- row_temp[index,]
row_temp <- dt["A"]
temp <- row_temp[index,]
nearest <- min(temp)
nearest
pos <- which(row_temp == nearest)
pos
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(DT)[pos]
current <- row.names(dt)[pos]
current
seq <- append(seq,current)
seq
carry <- 2
if (carrying<cap){
index <- names(dt) != seq
row_temp <- DT[current]
temp <- row_temp[index,]
nearest <- min(temp)
pos <- which(row_temp == nearest)
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(DT)[pos]
seq <- append(seq,current)
carry <- carry +1
}else{
current <- "O"
carrying <- 0
seq <- append(seq,current)
}
carrying <- 2
if (carrying<cap){
index <- names(dt) != seq
row_temp <- DT[current]
temp <- row_temp[index,]
nearest <- min(temp)
pos <- which(row_temp == nearest)
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(DT)[pos]
seq <- append(seq,current)
carry <- carry +1
}else{
current <- "O"
carrying <- 0
seq <- append(seq,current)
}
if (carrying<3){
index <- names(dt) != seq
row_temp <- dt[current]
temp <- row_temp[index,]
nearest <- min(temp)
pos <- which(row_temp == nearest)
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(dt)[pos]
seq <- append(seq,current)
carry <- carry +1
}else{
current <- "O"
carrying <- 0
seq <- append(seq,current)
}
seq
dt
carrying
c(1,7:9)
cap <- 3
seq(LETTERS,3)
seq(LETTERS)
letters
install.packages("wikipediatrend")
install.packages(c("XML", "tidyr"))
library(wikipediatrend)
data <- wp_trend(page="Essilor", from = "2013-01-01", to = "2015-12-31")
View(data)
library(ggplot2)
qplot(date,count,data = data)
summary(data)
data$count[data$count == 0] <- NA
qplot(date,count,data = data)
ds <- data$date
y <- log(data$count)
df <- data.frame()
df <- data.frame(ds,y)
view(df)
df
View(df)
qplot(ds , y, data = df)
library(prophet)
library(Rcpp)
library(prophet)
m <- prophet(df)
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m,future)
tail(forecast)
tail(forecast[c('ds','yhat','yhat_lower','yhat_upper')])
exp(5.027693)
plot(m, forecast)
prophet_plot_components(m, forecast)
prophet_plot_components(m, forecast)
library(prophet)
library(Rccp)
library(Rcpp,prophet,ggplot2)
prophet_plot_components(m, forecast)
str(HoltWinters())
str(HoltWinters
)
HoltWinters(ds)
as.ts(ds)
ht <- as.ts(ds)
HoltWinters(ht)
head(ht)
ht <- as.ts(ds$log)
head(ds)
ht <- as.ts(df)
head(ht)
calc <- HoltWinters(ht)
data <- structure(c(12, 20.5, 21, 15.5, 15.3, 23.5, 24.5, 21.3, 23.5,
28, 24, 15.5, 17.3, 25.3, 25, 36.5, 36.5, 29.6, 30.5, 28, 26,
21.5, 19.7, 19, 16, 20.7, 26.5, 30.6, 32.3, 29.5, 28.3, 31.3,
32.2, 26.4, 23.4, 16.4, 15, 16, 18, 27, 21, 49, 21, 22, 28, 36,
40, 3, 21, 29, 62, 65, 46, 44, 33, 62, 22, 12, 24, 3, 5, 14,
36, 40, 49, 7, 52, 65, 17, 5, 17, 1),
.Dim = c(36L, 2L), .Dimnames = list(NULL, c("Advertising", "Sales")),
.Tsp = c(2006, 2008.91666666667, 12), class = c("mts", "ts", "matrix")
)
head(data); nrow(data)
plot(data)
ht <- HoltWinters(data)
head(ht)
plot(ht)
plot(fitted(m))
plot(fitted(ht))
train = tdat[1:31]
test = tdat[32:36]
arma_fit <- auto.arima(train)
arma_forecast <- forecast(arma_fit, h = 5)
arma_fit_accuracy <- accuracy(arma_forecast, test)
arma_fit; arma_forecast; arma_fit_accuracy
plot(arma_forecast, ylim=c(0,60))
lines(tdat[1:36])
train = tdat[1:31]
test = tdat[32:36]
arma_fit <- auto.arima(train)
arma_forecast <- forecast(arma_fit, h = 5)
arma_fit_accuracy <- accuracy(arma_forecast, test)
arma_fit; arma_forecast; arma_fit_accuracy
plot(arma_forecast, ylim=c(0,60))
lines(tdat[1:36])
library(forecast)
install.packages("forecast")
moving_average = forecast(ma(tdat[1:31], order=2), h=5)
moving_average_accuracy = accuracy(moving_average, tdat[32:36])
moving_average; moving_average_accuracy
plot(moving_average, ylim=c(0,60))
lines(tdat[1:36])
library(forecast)
moving_average = forecast(ma(tdat[1:31], order=2), h=5)
moving_average_accuracy = accuracy(moving_average, tdat[32:36])
moving_average; moving_average_accuracy
plot(moving_average, ylim=c(0,60))
lines(tdat[1:36])
class(data)
class(data$"mtcars")
class(ds)
class(ht)
clearPushBack()
restartDescription()
library(forecast,ggplot2,HoltWinters())
library(forecast,ggplot2,HoltWinters
)
library(forecast)
library(ggplot2)
library(tseries)
str(runs.test)
library(wikipediatrend)
data <- wp_trend(page="Essilor", from = "2013-01-01", to = "2015-12-31")
str(runs.test)
runs.test(data)
facData <- as.factor(data)
head(dat)
head(data)
facData <- as.factor(data$count)
runs.test(facData)
class(data)
facData <- as.factor(data$date,data$count)
facData <- as.factor(data$count)
head(facData)
library(httr)
setwd("~/GitHub/DataScienceSpecialization")
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "b4ecef017afe019415e1",
secret = "d34723e579d8183001063f724f826083163371a9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
gtoken
myapp
stop_for_status(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
req
head(req)
head(gtoken)
head(myapp)
myapp
http_date(Sys.time())
parse_http_date("Sun, 06 Nov 1994 08:49:37 GMT")
