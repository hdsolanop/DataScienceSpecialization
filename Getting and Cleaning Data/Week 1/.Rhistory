class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
6 21 /7115
6218/7115
685/7115
685/7115 * 100
212/7115 * 100
search()
plot?
?plot
install.packages(c("Rcpp", "cluster"))
install.packages("cluster")
fs
Sys.time()
Sys.time()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins' , 'twins' )
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
paste?
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Hola mi amor!)
telegram("Hola mi amor!")
submit()
mad_libs(place = "la plaza", adjective = "asombrosas", noun = "sex machine")
submit()
'I' %p% 'love' %p% 'R!'
?swirl
library(swirl)
swirl()
install.packages(c("curl", "lattice", "readr", "stringi"))
apply
str(mapply)
?mapply()
library(swirl)
install.packages("tibble")
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
play()
viewinfo(flags)
viewinfo()
nxt()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?matcars
?mtcars
head(mtcars)
apply(mtcars, 2, mean)
apply(mtcars$mpg, 1, mean)
apply(mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
x[1]
x[1][1]
x[1][2]
x[1,1]
class(x)
x$4
x[1]-x[3]
round(x[1]-x[3])
debug(ls)
ls8
close
exit()
Q
Hla
a
d
ls()
install.packages("shiny")
library(swirl)
swirl()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
plot(xyy)
plot(x,y)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sapmple(1:20, 10)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle"
)
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
head(mtcars)
mtcars?
?mtcars
class(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages(c("sourcetools", "survival"))
install.packages("prophet")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("prophet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:prophet", unload=TRUE)
install.packages("Rccp")
library("prophet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("forecast")
install.packages("jsonlite")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(prophet)
install.packages("Rcpp")
install.packages("Rcpp")
library(prophet)
library(Rcpp)
library(prophet)
library(dplyr)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
months()
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sept","Oct","Nov","Dic")
x <- c(176358787,161322523,168749876,165252137,181597421,190721237,195987337,192187838,184326808,187912939,178649147,185649039)
plot(months,x)
plot.ts(months,x)
plot.ts(1:12,x)
data <- data.frame(months,x)
data
m <- prophet(data)
head(data)
m <- prophet(1:12,x)
data1 <- data.frame(1:12,log(x))
m <- prophet(data1)
data1 <- data.frame(1:12,x,y <- log(x))
data1
m <- prophet(data1)
as.Date(months)
as.Date(1:12)
indx <- seq(as.Date('2000-01-01'), length.out=30, by='6 month')
indx
indx <- seq(as.Date('2004-01-01'), length.out=12, by='1 month')
indx
data1 <- data.frame(indx,x,y <- log(x))
m <- prophet(data1)
df <- data.frame(indx,x)
m <- prophet(df)
class(indx)
seq(as.Date('2015-01-01'), as.Date('2016-01-01'), by = 'd')
seq(as.Date('2015-01-01'), as.Date('2016-01-01'), by = 'm')
m
m <- prophet(df)
names(df)
names(df) <- c("ds","y")
m <- prophet(df)
future <- make_future_dataframe(m,periods = 12)
tail(future)
future <- make_future_dataframe(m,periods = 24)
tail(future)
future <- make_future_dataframe(m,periods = 365)
tail(future)
forecast <- predict(m,future)
tail(forecast[c('ds','yhat','yhat_lower','yhat_upper')])
plot(m,forecast)
prophet_plot_components(m, forecast)
str(prophet)
install.packages("manipulate")
install.packages("manipulate")
install.packages(jailbreakr)
install.packages("jailbreakr")
install.packages("shiny")
library(shiny)
> runExample("01_hello")
runExample("01_hello")
x <- c(176358787,161322523,168749876,165252137,181597421,190721237,195987337,192187838,184326808,187912939,178649147,185649039)
seq(as.Date('2015-01-01'), as.Date('2016-01-01'), by = 'm')
seq(as.Date('2004-01-01'), as.Date('2005-01-01'), by = 'm')
seq(as.Date('2004-01-01'), as.Date('2004-12-01'), by = 'm')
plot.ts(x,y)
plot.ts(x,y)
y <- seq(as.Date('2004-01-01'), as.Date('2004-12-01'), by = 'm')
plot.ts(x,y)
y <- c(176358787,161322523,168749876,165252137,181597421,190721237,195987337,192187838,184326808,187912939,178649147,185649039)
x <- seq(as.Date('2004-01-01'), as.Date('2004-12-01'), by = 'm')
y <- c(176358787,161322523,168749876,165252137,181597421,190721237,195987337,192187838,184326808,187912939,178649147,185649039)
plot.ts(x,y)
install.packages("assertthat")
x
y
install.packages(c("RcppArmadillo", "curl", "zoo"))
install_from_swirl("Getting and Cleaning Data")
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library("rJava", lib.loc="~/Library/R/3.3/library")
detach("package:rJava", unload=TRUE)
system("java -version")
system("javarconfig")
system("javarconf")
system("javareconf")
system("javareconf")
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home")
library("rJava", lib.loc="~/Library/R/3.3/library")
library("rJava")
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library(rJava)
install.packages("rJava", type = "mac.binary")
install.packages("rJava", type = "mac.binary")
install_packages("rJava")
install.packages("rJava")
install_packages("xlsx")
install.packages("xlsx")
R CMD javareconf
library("xlsx", lib.loc="~/Library/R/3.3/library")
detach("package:xlsx", unload=TRUE)
detach("package:xlsxjars", unload=TRUE)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/Library/R/3.3/library")
library("xlsxjars", lib.loc="~/Library/R/3.3/library")
library("xlsx", lib.loc="~/Library/R/3.3/library")
library("xlsx", lib.loc="~/Library/R/3.3/library")
detach("package:xlsx", unload=TRUE)
detach("package:rJava", unload=TRUE)
detach("package:xlsxjars", unload=TRUE)
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
y
detach("package:rJava", unload=TRUE)
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("readxl", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("shiny", "tseries"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("shiny", "tseries"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("tseries")
Y
library("readxl", lib.loc="~/Library/R/3.3/library")
setwd("~/GitHub/DataScienceSpecialization/Getting and Cleaning Data/Week 1")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","Natural Gas Aquisition Program.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","Natural Gas Aquisition Program.xlsx")
dat <- read_excel("Natural Gas Aquisition Program.xlsx")
head(dat,5)
NCOL(dat)
dat <- dat[18:23,7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- read_excel("Natural Gas Aquisition Program.xlsx",range = G18:O23)
dat <- read_excel("Natural Gas Aquisition Program.xlsx",range = "G18:O23")
dat
class(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
library("XML", lib.loc="~/Library/R/3.3/library")
xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternalNodes = TRUE)
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc xmlParse(URL)
doc <-  xmlParse(URL)
doc <-  xmlParse( sub("x",URL))
doc <-  xmlParse( sub("s",URL))
sub("s","",URL)
doc <- xmlParse(sub("s","",URL))
class(doc)
rootNode(doc)
xmlRoot(doc)
RootNode <- xmlRoot(doc)
xlmName(RootNode)
docName(RootNode)
xmlName(RootNode)
xmlSApply(RootNode,xmlValue)
xmlSApply(RootNode,Zipcode)
xlmValue?
?xlmValue
??xlmValue
xmlSApply(RootNode,xmlValue(zipcode))
node <- xmlNode("foo", "Some text")
xmlValue(node)
RootNode
doc2 <- xmlTreeParse(URL,useInternalNodes = TRUE)
doc2 <- xmlTreeParse(sub("s","",URL),useInternalNodes = TRUE)
doc2
doc2$zipcode
xmlSApply(RootNode,xmlValue
)
xmlSApply(RootNode,xmlValue = <zipcode>)
xmlSApply(RootNode,xmlValue)
xmlToDataFrame(RootNode)
xmlToDataFrame(doc)
df <- data.frame(t(doc),row.names=NULL)
df <- data.frame(t(RootNode),row.names=NULL)
xmlToDataFrame(
getNodeSet(doc, "//value"),
colClasses=c("character","numeric")
)
xmlToDataFrame(
getNodeSet(doc, "//zipcode"),
colClasses=c("character","numeric")
)
xmlToDataFrame(
getNodeSet(doc, "/zipcode"),
colClasses=c("character","numeric")
)
xmlToDataFrame(doc,
colClasses=c("character","numeric")
)
xmlToDataFrame(t(doc),
colClasses=c("character","numeric")
)
doc <- xmlParse(sub("s","",URL),useInternalNodes = TRUE)
xmlToDataFrame(t(doc),
+     colClasses=c("character","numeric")
+ )
head(xmlToDataFrame(doc)
)
xmlToDataFrame(
getNodeSet(doc, "//value"),
colClasses=c("character","numeric")
)
xmlToDataFrame(
getNodeSet(doc, "//zipcode"),
colClasses=c("character","numeric")
)
getNodeSet(doc, "//zipcode")
xmlSApply(getNodeSet(doc, "//zipcode"))
xmlSApply(getNodeSet(doc, "//zipcode"),xmlValue)
zip <- xmlSApply(getNodeSet(doc, "//zipcode"),xmlValue)
sum(zip = "21231")
sum(zip == "21231")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "2006 MicrodataSurvey.csv" method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "2006 MicrodataSurvey.csv", method = "curl")
library(data.table)
DT <- fread("2006 MicrodataSurvey.csv")
names(DT)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(owMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
