row.names(dt)[pos]
seq <- "O"
append("A")
append("A",seq)
seq
append(seq,"A")
seq
visited <- seq[seq[which(seq!="O")]]
visited
seq != "O"
seq == "O"
seq
seq <- append(seq,"A")
seq == "O"
seq != "O"
visited <- seq[seq != "O"]
visited
names(dt)
names(dt) != seq
index <- names(dt) != seq
dt["A"][index]
index
dt["A"]
dt["A"][,index]
dt["A"][index,]
index <- names(dt) != seq
row_temp <- DT[current][index,]
row_temp <- dt[current][index,]
row_temp <- dt["A"][index,]
row_temp
nearest <- min(row_temp)
dt
nearest
pos <- which(row_temp == nearest)
pos
row_temp
index <- names(dt) != seq
row_temp <- DT[current]
temp <- row_temp[index,]
row_temp <- dt[current]
temp <- row_temp[index,]
row_temp <- dt["A"]
temp <- row_temp[index,]
nearest <- min(temp)
nearest
pos <- which(row_temp == nearest)
pos
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(DT)[pos]
current <- row.names(dt)[pos]
current
seq <- append(seq,current)
seq
carry <- 2
if (carrying<cap){
index <- names(dt) != seq
row_temp <- DT[current]
temp <- row_temp[index,]
nearest <- min(temp)
pos <- which(row_temp == nearest)
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(DT)[pos]
seq <- append(seq,current)
carry <- carry +1
}else{
current <- "O"
carrying <- 0
seq <- append(seq,current)
}
carrying <- 2
if (carrying<cap){
index <- names(dt) != seq
row_temp <- DT[current]
temp <- row_temp[index,]
nearest <- min(temp)
pos <- which(row_temp == nearest)
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(DT)[pos]
seq <- append(seq,current)
carry <- carry +1
}else{
current <- "O"
carrying <- 0
seq <- append(seq,current)
}
if (carrying<3){
index <- names(dt) != seq
row_temp <- dt[current]
temp <- row_temp[index,]
nearest <- min(temp)
pos <- which(row_temp == nearest)
if (length(pos)> 1){
pos <- sample(pos,1)
}
current <- row.names(dt)[pos]
seq <- append(seq,current)
carry <- carry +1
}else{
current <- "O"
carrying <- 0
seq <- append(seq,current)
}
seq
dt
carrying
c(1,7:9)
cap <- 3
seq(LETTERS,3)
seq(LETTERS)
letters
install.packages("wikipediatrend")
install.packages(c("XML", "tidyr"))
library(wikipediatrend)
data <- wp_trend(page="Essilor", from = "2013-01-01", to = "2015-12-31")
View(data)
library(ggplot2)
qplot(date,count,data = data)
summary(data)
data$count[data$count == 0] <- NA
qplot(date,count,data = data)
ds <- data$date
y <- log(data$count)
df <- data.frame()
df <- data.frame(ds,y)
view(df)
df
View(df)
qplot(ds , y, data = df)
library(prophet)
library(Rcpp)
library(prophet)
m <- prophet(df)
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m,future)
tail(forecast)
tail(forecast[c('ds','yhat','yhat_lower','yhat_upper')])
exp(5.027693)
plot(m, forecast)
prophet_plot_components(m, forecast)
prophet_plot_components(m, forecast)
library(prophet)
library(Rccp)
library(Rcpp,prophet,ggplot2)
prophet_plot_components(m, forecast)
str(HoltWinters())
str(HoltWinters
)
HoltWinters(ds)
as.ts(ds)
ht <- as.ts(ds)
HoltWinters(ht)
head(ht)
ht <- as.ts(ds$log)
head(ds)
ht <- as.ts(df)
head(ht)
calc <- HoltWinters(ht)
data <- structure(c(12, 20.5, 21, 15.5, 15.3, 23.5, 24.5, 21.3, 23.5,
28, 24, 15.5, 17.3, 25.3, 25, 36.5, 36.5, 29.6, 30.5, 28, 26,
21.5, 19.7, 19, 16, 20.7, 26.5, 30.6, 32.3, 29.5, 28.3, 31.3,
32.2, 26.4, 23.4, 16.4, 15, 16, 18, 27, 21, 49, 21, 22, 28, 36,
40, 3, 21, 29, 62, 65, 46, 44, 33, 62, 22, 12, 24, 3, 5, 14,
36, 40, 49, 7, 52, 65, 17, 5, 17, 1),
.Dim = c(36L, 2L), .Dimnames = list(NULL, c("Advertising", "Sales")),
.Tsp = c(2006, 2008.91666666667, 12), class = c("mts", "ts", "matrix")
)
head(data); nrow(data)
plot(data)
ht <- HoltWinters(data)
head(ht)
plot(ht)
plot(fitted(m))
plot(fitted(ht))
train = tdat[1:31]
test = tdat[32:36]
arma_fit <- auto.arima(train)
arma_forecast <- forecast(arma_fit, h = 5)
arma_fit_accuracy <- accuracy(arma_forecast, test)
arma_fit; arma_forecast; arma_fit_accuracy
plot(arma_forecast, ylim=c(0,60))
lines(tdat[1:36])
train = tdat[1:31]
test = tdat[32:36]
arma_fit <- auto.arima(train)
arma_forecast <- forecast(arma_fit, h = 5)
arma_fit_accuracy <- accuracy(arma_forecast, test)
arma_fit; arma_forecast; arma_fit_accuracy
plot(arma_forecast, ylim=c(0,60))
lines(tdat[1:36])
library(forecast)
install.packages("forecast")
moving_average = forecast(ma(tdat[1:31], order=2), h=5)
moving_average_accuracy = accuracy(moving_average, tdat[32:36])
moving_average; moving_average_accuracy
plot(moving_average, ylim=c(0,60))
lines(tdat[1:36])
library(forecast)
moving_average = forecast(ma(tdat[1:31], order=2), h=5)
moving_average_accuracy = accuracy(moving_average, tdat[32:36])
moving_average; moving_average_accuracy
plot(moving_average, ylim=c(0,60))
lines(tdat[1:36])
class(data)
class(data$"mtcars")
class(ds)
class(ht)
clearPushBack()
restartDescription()
library(forecast,ggplot2,HoltWinters())
library(forecast,ggplot2,HoltWinters
)
library(forecast)
library(ggplot2)
library(tseries)
str(runs.test)
library(wikipediatrend)
data <- wp_trend(page="Essilor", from = "2013-01-01", to = "2015-12-31")
str(runs.test)
runs.test(data)
facData <- as.factor(data)
head(dat)
head(data)
facData <- as.factor(data$count)
runs.test(facData)
class(data)
facData <- as.factor(data$date,data$count)
facData <- as.factor(data$count)
head(facData)
install.packages("plier", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("plyr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("rlang", "tibble"))
AreRedes <- rnorm(46065,58.2,3)
summary(AreRedes)
AreRedes <- rnorm(46065,58.2,9)
summary(AreRedes)
Redes <- rnorm(c(46065,16835),c(58.2,56.4),9)
head(Redes)
Redes <- sapply(n = c(46065,16835),rnorm,mean = c(58.2,56.4),sd = 9)
Redes <- sapply(n = c(46065,16835),FUN = rnorm,mean = c(58.2,56.4),sd = 9)
Redes <- sapply( x =  c(46065,16835),FUN = rnorm,mean = c(58.2,56.4),sd = 9)
Redes <- sapply( X =  c(46065,16835),FUN = rnorm,mean = c(58.2,56.4),sd = 9)
head(Redes)
head(Redes,10)
summary(Redes)
sapply(Redes,summary)
install.packages("tibble")
install.packages(c("Rcpp", "rlang", "shinydashboard", "tibble"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("Hmisc", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("plyr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("plyr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
require(xlsx)
library("rJava");
java_home
library("rJava"); .jinit(); .jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
install.packages("reshape2", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
require(reshape2)
library("rJava", lib.loc="~/Library/R/3.4/library")
detach("package:rJava", unload=TRUE)
head(mtcars)
install.packages("dplyr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("gdata")
install.packages("gdata", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(swirl)
swirl
swirl()
read.c
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time
)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
select(cran,id)
select(cran,ip_id)
class(cran)
swirl()
filter(cran,country == "US", r_version =="3.1.1")
?Comparison
filter(cran,country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, country == "US" | country == "IN")
ilter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
install.packages("dplyr")
library(swirl)
swirl()
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(select(cran,r_version)))
View(cran)
filter(cran,!is.na(select(cran,r_version)))
filter(cran,!is.na(r_version))
select(cran2,size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id, package,size)
cran3
make_tbl(cars)
dim(cars)
as.tbl(cars)
swirl()
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20,size_gb= size_mb / 2^10)
mutate(cran3,corretct_size = size+1000)
mutate(cran3,correct_size = size + 1000)
summarise(cran,avg_bytes = mean(size))
summarize(cran,avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
n?
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter(pack_sum,count > 679)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum,uniaue > 465)
View(pack_sum)
top_unique <- filter(pack_sum , uniaue > 465)
top_unique <- filter(pack_sum, uniaue>465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View()
View(top_unique_sorted)
submit
submit()
submit()
?chain
??chain
submit
submit()
View(result3)
submit()
submit()
submit()
submit()
install.packages("dplyr")
clearPushBack()
rm
rm(ls())
ls()
rm(list = ls())
gdpdf <- read.csv("GDP.csv")
setwd("~/GitHub/DataScienceSpecialization/Getting and Cleaning Data/week 3/Quiz")
gdpdf <- read.csv("GDP.csv")
edudf <- read.csv("EducationaData.csv")
library(c("dplyr,tydir"))
library("dplyr,tydir")
library("dplyr","tydir")
library(dplyr,tydir)
?dplyr
names(edudf)
matcheddf <- combine(gpdf,edudf)
matcheddf <- combine(gdpdf,edudf)
matcheddf <- merge(gdpdf,edudp, by.x = "X",by.y = "CountryCode" )
matcheddf <- merge(gdpdf,edudf, by.x = "X",by.y = "CountryCode" )
View(matcheddf)
names(gdpdf)
head(gdpdf)
ordered <- arrange(matcheddf, Gross.domestic.product.2012)
View(ordered)
224-35
ordered <- arrange(matcheddf, desc(Gross.domestic.product.2012))
ordered <- arrange(matcheddf, desc(X3))
ordered <- arrange(matcheddf, desc(X.3))
head(gdpdf)
library(readr)
GDP <- read_csv("~/GitHub/DataScienceSpecialization/Getting and Cleaning Data/week 3/Quiz/GDP.csv",
col_types = cols(X10 = col_skip(), X3 = col_skip(),
X6 = col_skip(), X7 = col_skip(),
X8 = col_skip(), X9 = col_skip()),
na = "empty", skip = 4)
View(GDP)
mergedData <- GDP %>% merge(edudf, by.x = "X1",by.y = "CountryCode" ) %>% arrange(desc(X4))
View(mergedData)
ordered <- select(mergedData, !is.na(X5) )
!is.na(mergedData$X5)
head(mergedData)
ordered <- select(mergedData, X5 == ".." )
mergedData$X5 == ..
mergedData$X5 == ".."
ordered <- select(mergedData, mergedData$X5 == ".." )
ordered <- filter(mergedData, mergedData$X5 == ".." )
View(ordered)
ordered <- filter(mergedData, !(mergedData$X5 == ".." ))
ordered <- arrange(ordered,desc(X5))
View(ordered)
ordered <- mutate(ordered, X5 = as.numeric(X5))
GDP
library(readr)
GDP <- read_csv("~/GitHub/DataScienceSpecialization/Getting and Cleaning Data/week 3/Quiz/GDP.csv",
col_types = cols(X10 = col_skip(), X3 = col_skip(),
X5 = col_number(), X6 = col_skip(),
X7 = col_skip(), X8 = col_skip(),
X9 = col_skip()), skip = 4)
View(GDP)
View(edudf)
test <- GPD %>% merge(edudf, by.x = X1, by.y = CountryCode, incomparables = NA )
View(GDP)
test <- GDP %>% merge(edudf, by.x = X1, by.y = CountryCode, incomparables = NA )
test <- GDP %>% merge(edudf, by.x = "X1", by.y = "CountryCode", incomparables = NA )
head(test)
dim(test)
class(test$X5)
test <- test %>% filter(!is.na(test$X5)) %>% arrange(desc(X5))
View(test)
test <- test %>% filter(!is.na(test$X5)) %>% arrange(desc(X5)) %>% filter(!is.na(test$X2))
?gather
library(tidyr)
?gather
?`tidyr-package`
?tidyr
by_income <- summarize(test, Income.Group, avg_income = mean(X5))
by_income <- summarize(group_by(test, Income.Group), avg_income = mean(X5))
by_income
ranking <- test %>% group_by(X2)
View(ranking)
q <- quantile(tes$X2,c(0.2,0.4,0.6,0.8,1)
)
q
q <- quantile(tes$X2,c(0.2,0.4,0.6,0.8,1))
q <- quantile(test$X2,c(0.2,0.4,0.6,0.8,1))
q <- quantile(test$X2,c(0.2,0.4,0.6,0.8))
q <- quantile(test$X5,c(0.2,0.4,0.6,0.8,1))
q
a <- quantile(test$X2,c(0.2,0.4,0.6,0.8,1))
class(test$X2)
test <- mutate(test, X2 <- as.numeric(X2))
a <- quantile(test$X2,c(0.2,0.4,0.6,0.8,1))
a
class(test$X2)
test <- mutate(test, X2 = as.numeric(X2))
class(test$X2)
a <- quantile(test$X2,c(0.2,0.4,0.6,0.8,1))
a
test2 <- group_by(test, test$X2 < a)
test2 <- group_by(test, quantile(test$X2,c(0.2,0.4,0.6,0.8,1) )
)
test2 <- lapply(test,group_by(X2 < a))
test2 <- filter(test,X2 < 38)
test2
test2 %>% group_by(Income.Group) %>% summarize(avg_income <- mean(X5))
test2 %>% group_by(Income.Group) %>% summarize(avg_income <- mean(X5),a=n())
df <- read.csv("microdata.csv")
as.tbl(df)
microdata <- as.tbl(df)
rm("df")
agricultureLogical <- microdata$ACR == 3 & microdata$AGS == 6
which(microdata,agricultureLogical) [1:3]
agricultureLogical <- microdata$ACR == 3 & microdata$AGS == 6
which(agricultureLogical)
which(agricultureLogical)[1:3,]
which(agricultureLogical)[1:3]
library(jpeg)
jpdf <- readJPEG("jeff.jpg",native = TRUE)
quantile(jpdf,c(0.3,0.8))
names(GDP)
setNames(GDP, names(GDP), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
names(GDP) <-  c("CountryCode", "rankingGDP", "Long.Name", "gdp")
names(GDP)
View(GDP)
View(edudf)
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
dt <- merge(GDP, edudf, all=TRUE, by=c("CountryCode"))
dt
sum(!is.na(unique(dt$rankingGDP)))
dt %>% group_by(Income.Group) %>% summarize(avg_income = mean(gdp))
dt %>% group_by(Income.Group) %>% summarize(avg_income = mean(gdp,na.rm = TRUE))
dt %>% group_by(Income.Group) %>% summarize(avg_rank = mean(rankingGDP,na.rm = TRUE))
dt %>% group_by(Income.Group) %>% summarize(avg_rank = mean(as.numeric(rankingGDP),na.rm = TRUE))
rm(list = ls())
