install.packages("cluster")
fs
Sys.time()
Sys.time()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins' , 'twins' )
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
paste?
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Hola mi amor!)
telegram("Hola mi amor!")
submit()
mad_libs(place = "la plaza", adjective = "asombrosas", noun = "sex machine")
submit()
'I' %p% 'love' %p% 'R!'
?swirl
library(swirl)
swirl()
install.packages(c("curl", "lattice", "readr", "stringi"))
apply
str(mapply)
?mapply()
library(swirl)
install.packages("tibble")
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
play()
viewinfo(flags)
viewinfo()
nxt()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?matcars
?mtcars
head(mtcars)
apply(mtcars, 2, mean)
apply(mtcars$mpg, 1, mean)
apply(mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
x[1]
x[1][1]
x[1][2]
x[1,1]
class(x)
x$4
x[1]-x[3]
round(x[1]-x[3])
debug(ls)
ls8
close
exit()
Q
Hla
a
d
ls()
install.packages("shiny")
library(swirl)
swirl()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
plot(xyy)
plot(x,y)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sapmple(1:20, 10)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle"
)
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
head(mtcars)
mtcars?
?mtcars
class(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages(c("sourcetools", "survival"))
install.packages("prophet")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("prophet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:prophet", unload=TRUE)
install.packages("Rccp")
library("prophet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("forecast")
install.packages("stringi")
install.packages("stringi")
?prophet
??prophet
setwd("~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 ")
ls
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
sapply(outcome,class)
ncol(outcome)
nrow(outcome)
names(outcome)
class(outcome[,11])
outcome[,11] <- as.numeric(outcome[,11])
class(outcome[,11])
hist(outcome[,11])
summary(outcome[,11])
head(outcome[,7])
findMatches("AL",outcome[,7])
library("S4Vectors", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
findMatches("AL",outcome[,7])
findMatches("AL",outcome[,7]) =! NULL
findMatches("AL",outcome[,7]) =! Na
findMatches("AL",outcome[,7]) =! Null
findMatches("AL",outcome[,7])
findMatches("hou",outcome[,7])
class(findMatches("hou",outcome[,7]))
unique(outcome[,7])
unique(outcome[,7])
out <- "pneumonia"
out <- "pneumonia"
out
Out_name <- c("heart attack","heart failure","pneumonia")
Out_name
identical(out,Out_name)
logical(0)
for(i in 1:3){
check_out[i] <- identical(out,Out_name[i])
}
check_out <- logical(3)
for(i in 1:3){
check_out[i] <- identical(out,Out_name[i])
}
check_out
US_states <- unique(data[,7])
US_states <- unique(outcome[,7])
check_state <- logical(length = length(US_states))
for(i in 1:length(US_states)){
check_state[i] <- identical("AL",US_states[i])
}
check_state
?is
is.element("AL",US_states)
class(US_states)
c("Error in bes(","AL")
paste("Error in bes(","AL")
max(outcome[,/])
max(outcome[,7])
head[outcome[,17]]
head(outcome[,17])
head(outcome[,11])
max(outcome[,11])
max(outcome[,11], na.rm = TRUE)
outcome[,11] == 21.9
outcome[,11][!is.na[outcome[,11]]] == 21.9
outcome[,11][!is.na(outcome[,11])] == 21.9
sum(outcome[,11][!is.na(outcome[,11])] == 21.9)
ncol(outcome[outcome])
ncol(complete.cases(outcome)
)
complete.cases(outcome)
data <- complete.cases(outcome)
ncol(data)
data
data <- outcome[complete.cases(outcome)]
data <- outcome[complete.cases(outcome),1:47]
data <- outcome[complete.cases(outcome),1:43]
ncol(outcome)
data <- outcome[complete.cases(outcome),1:46]
head(data)
names(data)
max(data[,11])
index <- data[,11] == max(data[,11])
sum(index)
data[index,2]
a <- c("d","b","a")
sort(a)
sort("b")
sort("b")[1]
getwd()
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("TX", "heart attack")
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("TX", "heart attack")
best("BB", "heart attack")
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("BB", "heart attack")
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("BB", "heart attack")
best("NY", "hert attack")
best("MD", "pneumonia")
debug(best)
best("MD", "pneumonia")
View(data)
library(stats)
best("MD", "pneumonia")
debug()
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("MD", "pneumonia")
debug(best)
best("MD", "pneumonia")
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("MD", "pneumonia")
best("TX", "heart attack")
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("TX", "heart attack")
debug(best)
best("TX", "heart attack")
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("TX", "heart attack")
debug(best)
best("TX", "heart attack")
View(data)
View(data)
View(data)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
head(outcome)
order(outcome)
order(outcome[,11],min)
rank(outcome[,11],ties.method = "first")
str(order)
showMethods(order)
outcome[,c(2,11)][with(outcome[,c(2,11)],order(1,-2))]
head(outcome[,c(2,11)][with(outcome[,c(2,11)],order(1,-2))])
head(outcome[,c(2,11)][with(outcome[,c(2,11)],order(-1,-2))])
example("order")
head(outcome[,c(2,11)][with(outcome[,c(2,11)],order(-1,-2))])
head(outcome[,c(2,11)][with(outcome[,2],order(-1,-2))])
head(outcome[,c(2,11)][with(outcome[,c(1,2)],order(-1,-2))])
head(outcome[,c(2,11)][with(outcome[,c(2,11)],order(-1,-2))])
head(outcome[,c(2,11)][with(outcome[,c(2:11)],order(-1,-2))])
head(outcome[,c(2,11)][with(outcome[,c(2,11)],order(-1,-2))])
head(outcome[,c(2,11)][with(outcome[,c(2,11)],order(-1,-2))])[5]
head(outcome[,c(2,11)][with(outcome[,c(2,11)],order(-1,-2))])[5,1]
with(outcome[,c(2,11)],order(-1,-2))])
with(outcome[,c(2,11)],order(-1,-2))])])
with(outcome[,c(2,11)],order(-1,-2))
order(outcome[,c(2,11)],c(-1,-2)
)
head(outcome[,c(2,11)])
outcome[,c(2,11)][,order(1,-2)]
outcome[,c(2,11)][order(1,-2),]
View(outcome)
data <- outcome[outcome[,7]== "AL",1:11]
data
head(data)
data[,order(-Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)]
data[,order(-"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
data[cc(2,11)]
data[,c(2,11)]
data <- data[,c(2,11)]
head(data)
data[,order("Hospital.Name",-"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
data[,order(c(1,-2))]
data[,order(,c(1,-2))]
class(data)
names(data)
data[order(data[,1],-data[,2])]
data[order(data[,1],-data[,2]),]
data[order(-data[,1],data[,2]),]
data[order(data[,1],data[,2]),]
data[order(data[,2]),]
complete.cases(data[order(data[,1],data[,2]),])
data[order(data[,1],data[,2]),]
ordered <- data[order(data[,1],data[,2]),]
ordered <- data[order(data[,2]),]
ordered
head(ordered)
View(data)
data[-order(data[,2]),]
data[order(-data[,2]),]
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
debug(rankhospital)
rankhospital("TX", "heart failure", 4)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
debug(rankhospital)
rankhospital("TX", "heart failure", 4)
View(data)
View(data)
View(data)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
rankhospital("TX", "heart failure", 4)
View(data)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
ranking <- data.frame()
ranking <- data.frame()
names(ranking) <- US_states
names(ranking) <- c("hospital", "state")
?c
?append
append(ranking[,2],US_states)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankal.R')
head(rankall("heart attack", 20), 10)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankall.R')
debug(rankall)
head(rankall("heart attack", 20), 10)
View(temp)
View(hospital)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankall.R')
hospital <- character(o)
hospital <- character(0)
append(hospital,"hola")
hospital
hospital <- append(hospital,"hola")
hospital
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankall.R')
head(rankall("heart attack", 20), 10)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankall.R')
head(rankall("heart attack", 20), 10)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
r
as.character(subset(r, state == "HI")$hospital)
as.character(subset(r, US_states == "HI")$hospital)
source('~/GitHub/DataScienceSpecialization/R programming/ProgAssignment3 /rankall.R')
MEDICAL
r <- rankall("pneumonia", "worst")
r
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
