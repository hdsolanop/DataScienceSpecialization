demo(package = .packages(all.available = TRUE))
demo(tkcanvas)
demo(package = tkcanvas)
tkcanvas
tkcanvas()
library(tcltk)
demo(package = tkcanvas)
demo(tkcanvas)
require(tcltk) || stop("tcl/tk library not available")
[1] TRUE
> require(graphics); require(stats)
> local({
+     have_ttk <- as.character(tcl("info", "tclversion")) >= "8.5"
+     if(have_ttk) {
+         tkbutton <- ttkbutton
+         tkframe <- ttkframe
+         tklabel <- ttklabel
+     }
+     tclServiceMode(FALSE) # don't display until complete
+     top <- tktoplevel()
+     tktitle(top) <- "Plot Demonstration"
x <- 1
print(x)
x
msg <- "hello"
msg
print(msg)
## comment on this
f
x <- rnorm(20
Â°
)
x <- rnorm(20)
print(x)
mean(x)
x
x ## auto-printing occurs
msg <- "Oh MyG"
jajajaj
y <- 1:40
Y
y
x + y
integer(x)
?vector
integer(1)
integer(1L)
integer(1.0)
integer()
integer(NA)
O/O
0/0
attributes(x)
attributes(matrix())
attributes(length)
attributes(vector())
c()
x <- c(0.5 , 0.6)
X
x
c(T,F)
X <- vector("numeric", length = 10)
X
class(x)
class(X)
class(msg)
as.numeric(msg)
as.logical(x)
as.logical(X)
as.character(x)
as.character(X)
as.complex(x)
x <- list(1, "a",TRUE,1 + 4i)
x
x[[1]]
x[[4]]
as.complex(x)
x
class(x)
attibutes(list())
attributes(list())
m <- matrix(2,3)
attributes(m)
m
m <- matrix(2,3)
m <- matrix(nrow = 2, ncoll =3)
m <- matrix(nrow = 2, ncol =3)
m
m <- matrix(1:6, 2,3)
m
attributes(m)
m[1,3]
y <- 1:10
dim(y) <- c(2,5)
y
mean(x)
?lm
u <- factor(c("yes","yes","yes","no"))
u
table(u)
class(u)
unclass(u)
u
table(unclass(u))
table(u)
u <- factor(c("yes","yes","yes","no"),levels = c("yes","no"))
u
is.na(x)
is.nan(x )
is.nan(x)
is.nan(u)
contributors()
x <- data.frame(foo = 1:4,bar = c(T,T,F,F))
X
x
nrow(x)
ncol(x)
attributes(x)
y <- 1:3
names(x)
names(y)
names(y) <- c("foo", "bar", "norf")
y
names(y)
y$foo
class(y)
class(xx)
class(x)
data.frame
x
x[[1,2]]
x[[0,1]]
x[[1,5]]
x[[1,4]]
x[[1]]
x[["foo"]]
x[["bar"]]
install.packages(c("DBI", "jsonlite", "mgcv", "nlme", "stringr", "swirl"))
install.packages("swirl")
packageVersion("swirl")
library(swirl)+
library(swirl)
swirl()
swirl8
swirl()
5+7
x<- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z<- c(1.1, 9, 3.14)
?c
z
c(z,55,z)
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files)
wd8
wd8
wd()
getwd()
old.dir <- getwd()
dir.create(testdir)
dir.create(testdir)
args(dir.create)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(folder1, folder2)
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'),recursive = TRUE)
setwd(old.dir)
library(swirl)
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
seq(5,10,length=30)
?seq
seq(5,10, length = 30)
seq(5, 10, length=30)
seq(5, 10, length = 30)
seq(5, 10, length = 30)
seq(5, 10, length=30)
my_seq <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(1:2,times = 10)
rep(0:2,times = 10)
rep(c(0,1,2),times = 10)
rep(c(0,1,2),each = 10)
library(swirl)
swirl()
num_vect <- c(0.5,55,-10)
num_vect <- c(0.5,55,-10,6)
tf num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Hernan")
c(my_char,"Hernan")
my_name <- c(my_char, "Hernan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
swirl()
install.packages(c("cluster", "survival"))
install.packages(/private/var/folders/2r/tx3z9x2x6hb7262hwtq09tx40000gn/T/Rtmp63cOhv/downloaded_packages repos = NULL, type="source")
install.packages(/private/var/folders/2r/tx3z9x2x6hb7262hwtq09tx40000gn/T/Rtmp63cOhv/downloaded_packages, repos = NULL, type="source")
library()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
is.na(my_data)
my_na z-is.na(my_data)
my_na <- is.na(my_data)
my_na
NA == my_data
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
?if
()
info(ig)
for (i in 1:10){}
for (i in 1:10){print i
}
for (i in 1:10){print(i)}
swirl()
library(swirl)
swirl()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(1,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar",  "norf")
identical(vect, vect"")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
swirl()
swirl()
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
6 21 /7115
6218/7115
685/7115
685/7115 * 100
212/7115 * 100
search()
plot?
?plot
install.packages(c("Rcpp", "cluster"))
install.packages("cluster")
fs
Sys.time()
Sys.time()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins' , 'twins' )
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
paste?
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Hola mi amor!)
telegram("Hola mi amor!")
submit()
mad_libs(place = "la plaza", adjective = "asombrosas", noun = "sex machine")
submit()
'I' %p% 'love' %p% 'R!'
?swirl
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
swirl()
as.character(cls_list)
read.csv()
read.csv(/specdata/001.csv)
read.csv(specdata/001.csv)
ls
getwd()
setwd("~/GitHub/DataScienceSpecialization/R programming")
setwd("~/GitHub/DataScienceSpecialization/R programming")
play()
nxt()
exit()
info()
bye()
setwd("~/GitHub/DataScienceSpecialization/R programming")
read.csv("specdate/001.csv")
ls
cd
list()
library(readr)
dataset <- read_csv("~/GitHub/DataScienceSpecialization/R programming/specdata/013.csv",
col_types = cols(nitrate = col_double(),
sulfate = col_double()))
View(dataset)
for?
?for
()
for(i in 1:5) print(1:i)
paste("00",toString(1),".csv")
paste("00",toString(1),".csv",sep = "")
length(22)
nchar(22)
head(dataset)
names(dataset)
dataset$sulfate
mean(dataset$sulfate,na.rm = TRUE)
mean(dataset$sulfate,na.rm = FALSE)
p <- "sulfate"
dataset$p
colnames(dataset)
dataset[p]
dataset[]
dataset["sulfate"]
equals
identical(dataset["sulfate"],dataset[p])
mean(dataset$sulfate,na.rm = FALSE)
mean(dataset$sulfate,na.rm = TRUE)
setwd("~/GitHub/DataScienceSpecialization/R programming")
source("pollutantmean.R")
for(i in 1:l) {
if(nchar(id[i]) = 1){
f <- paste("00",toString(id[i]),".csv", sep = "")
} else if(nchar(id[i]) = 2){
f <- paste("0",toString(id[i]),".csv", sep = "")
} else {
f <- paste(toString(id[i]),".csv", sep = "")
}
temp <-  read.csv(f, col_types = cols(nitrate = col_double(), sulfate = col_double()))
x[i] <- mean(temp[pollutant],na.rm = TRUE)
}
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
setwd("~/GitHub/DataScienceSpecialization/R programming")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
setwd("~/GitHub/DataScienceSpecialization/R programming")
setwd(specdata)
setwd("specdata")
setwd("~/GitHub/DataScienceSpecialization/R programming")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
x <- vector(length = l)
getwd()
setwd("~/GitHub/DataScienceSpecialization/R programming")
source('~/GitHub/DataScienceSpecialization/R programming/Pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1)
getwd()
setwd("~/GitHub/DataScienceSpecialization/R programming")
pollutantmean("specdata", "sulfate", 1)
class(dataset[p])
class(dataset$sulfate)
class(dataset$Date)
source('~/GitHub/DataScienceSpecialization/R programming/Pollutantmean.R')
pollutantmean("specdata", "sulfate", 1)
getwd() =! "/Users/hdsolanop/GitHub/DataScienceSpecialization/R programming/specdata"
getwd() == "/Users/hdsolanop/GitHub/DataScienceSpecialization/R programming/specdata"
source('~/GitHub/DataScienceSpecialization/R programming/Pollutantmean.R')
pollutantmean("specdata", "sulfate", 1)
source('~/GitHub/DataScienceSpecialization/R programming/Pollutantmean.R')
pollutantmean("specdata", "sulfate", 1)
pollutantmean("specdata", "sulfate", 1)
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
install.packages(c("curl", "lattice", "readr", "stringi"))
